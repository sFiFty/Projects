const rgbs = [...document.querySelectorAll(".rgb")];const hex = document.querySelector("#hex");const colorPreview = document.querySelector(".colorPreview");[...rgbs, hex].forEach(e => {    e.addEventListener("input", input);});colorPreview.addEventListener("change", event => {    let hexColor = colorPreview.value.slice(1);    let rgbColor = hexToRgb(hexColor)    hex.value = hexColor;    rgbs.forEach((elem, i) => {        elem.value = rgbColor[i];    })});function input(event){    let elem = event.target;    let color = "";    if (elem === hex){        let color2 = hexToRgb(elem.value);        color = elem.value;        rgbs.forEach((elem, i) => {            elem.value = color2[i];        });    } else if (rgbs.includes(elem)){        let rgb = [];        rgbs.forEach(e => {            if (e.value.length >= 3) e.value = e.value.slice(0, 3);            let color = +e.value||0;            rgb.push(color);            e.value = color;        });        color = rgbToHex(rgb).slice(1);        hex.value = color;    }    {        while(color.length < 6){            color += "0";        }        colorPreview.value = "#" + color;    }}function copyColor(type){    let color = "";    if (type === "hex"){        color = "#" + (hex.value || "000000");        navigator.clipboard.writeText(color);    } else if (type === "rgb"){        let rgb = rgbs.map(e => e.value || 0);        color = `rgb(${rgb.join(", ")})`        navigator.clipboard.writeText(color);    }    Swal.fire(        color,        'Скопировано!'    );}function componentToHex(c) {    if (!c) return "00";    let hex = c.toString(16);    return hex.length === 1 ? "0" + hex : hex;}function rgbToHex(rgb) {    return "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);}function hexToRgb(hex) {    let bigint = parseInt(hex, 16);    let r = (bigint >> 16) & 255;    let g = (bigint >> 8) & 255;    let b = bigint & 255;    return [r,  g, b];}