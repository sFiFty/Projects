const events = new Set(Object.keys(window).filter(e => e.startsWith("on")));(function (){    let str = String.prototype;    if(!str.replaceAll){        str.replaceAll = function (regExp, rep){            return this.replace(new RegExp(regExp, "g"), rep);        }    }})();function getAllChilds(elem, arr=[elem]){    let nodes = elem.childNodes;    let len = nodes.length;    for (let i = 0; i < len; i++){        let item = nodes[i];        arr[arr.length] = item;        getAllChilds(item, arr);    }    return arr;}function attrs(elem1, elem2){    let arr = [...elem1.getAttributeNames(), ...elem2.getAttributeNames()]    for (let i = 0; i < arr.length; i++) {        if (!arr[i]) continue;        let val1 = elem1.getAttribute(arr[i]);        let val2 = elem2.getAttribute(arr[i]);        if (val1 !== val2){            if (!val2) {                elem1.removeAttribute(arr[i])            } else {                elem1.setAttribute(arr[i], val2);            }        }    }}export function View(elem, nodes) {    let childs = elem.childNodes;    let fragment = document.createDocumentFragment();    for (let i = 0; i < nodes.length; i++) {        let item = childs[i];        let item2 = nodes[i];        if (!item) {            fragment.append(item2);            continue;        }        if (item.outerHTML === item2.outerHTML) continue;        let allChilds = getAllChilds(item);        let allChilds2 = getAllChilds(item2);        let allChildsLen = allChilds.length;        let allChildsLen2 = allChilds2.length;        if (allChildsLen !== allChildsLen2) {            elem.replaceChild(item2, item);            continue;        }        for (let i = 0; i < allChildsLen; i++) {            if (allChilds[i].nodeName === "#text") {                if (allChilds[i].data !== allChilds2[i].data) {                    allChilds[i].data = allChilds2[i].data;                }            } else {                attrs(allChilds[i], allChilds2[i]);            }        }    }    if (fragment.children.length > 0) elem.append(fragment);}export function toHTML(str, data={}){    let div = document.createElement("div");    let matched = str.match(/{{(.*?)}}/g);    let matchedLen = (matched && matched.length) || 0;    for(let i = 0; i < matchedLen; i++){        let e = matched[i];        let e2 = e.trim().slice(2, -2).trim();        if(!(data[e2] instanceof Function)){            if(typeof data[e2] === "string"){                str = str.replace(e, data[e2].replaceAll("<", "&lt;"));            } else if(typeof data[e2] === "number"){                str = str.replace(e, data[e2].toString());            }        }    }    div.innerHTML = str;    let elems = div.querySelectorAll("*");    let len = elems.length;    for(let i = 0; i < len; i++){        let elem = elems[i];        let attrs = elem.getAttributeNames();        for(let j = 0; j < attrs.length; j++){            let attr = attrs[j];            if(!events.has(attr)) continue;            let attrValue = elem.getAttribute(attr).trim();            if(!attrValue.startsWith("{{") || !attrValue.endsWith("}}")) continue;            let funcName = attrValue.slice(2, -2).trim();            // set onevent            elem.removeAttribute(attr);            elem[attr] = data[funcName];        }    }    let children = div.children;    return children.length > 1 ? children : children[0];}export function waitAllImgs(nodes){    if(!nodes) return Promise.resolve(nodes);    if(!Array.isArray(nodes)) nodes = [nodes];    let len = nodes.length;    let promises = [];    for(let i = 0; i < len; i++){        let imgsNodes = nodes[i].querySelectorAll("img");        let len2 = imgsNodes.length;        for(let j = 0; j < len2; j++){            promises.push(                new Promise(res => {                        imgsNodes[j].onload = res;                    }                )            );        }    }    return Promise.all(promises).then(e => nodes);}export function rand(num1, num2){    return Math.round(Math.random() * (num2-num1) + num1);}